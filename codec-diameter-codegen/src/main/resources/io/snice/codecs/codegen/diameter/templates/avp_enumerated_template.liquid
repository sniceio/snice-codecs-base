package {{java.package}};

import io.snice.buffer.Buffer;
import io.snice.buffer.WritableBuffer;

import io.snice.codecs.codec.diameter.avp.Avp;
import io.snice.codecs.codec.diameter.avp.AvpMandatory;
import io.snice.codecs.codec.diameter.avp.AvpParseException;
import io.snice.codecs.codec.diameter.avp.AvpProtected;
import io.snice.codecs.codec.diameter.avp.FramedAvp;
import io.snice.codecs.codec.diameter.avp.Vendor;
{% for import in java.imports %}
import {{ import }};{% endfor %}

import java.util.Optional;
import static io.snice.preconditions.PreConditions.assertNotNull;

/**
 * {{ javadoc.class }}
 */
public interface {{java.class.name}} extends Avp<{{avp.type.interface}}<{{java.class.name}}.Code>> {

    int CODE = {{avp.code}};
    {% for variable in avp.variable_definition %}
    {{ variable }}{% endfor %}

    @Override
    default long getCode() {
        return CODE;
    }

    default {{java.class.name}} to{{java.class.name}}() {
        return this;
    }

    default boolean is{{java.class.name}}() {
        return true;
    }

    @Override
    default void writeValue(final WritableBuffer buffer) {
        buffer.write(getValue().getValue());
    }

    static {{java.class.name}} of(final int code) {
        final Optional<Code> c = Code.lookup(code);
        final EnumeratedHolder enumerated = new EnumeratedHolder(code, c);
        final Avp<Enumerated> avp = Avp.ofType(Enumerated.class)
                .withValue(enumerated)
                .withAvpCode(CODE)
                .isMandatory(AvpMandatory.{{avp.mandatory_bit}}.isMandatory())
                .isProtected(AvpProtected.{{avp.protected_bit}}.isProtected())
                .withVendor(Vendor.{{avp.vendor}})
                .build();
        return new Default{{java.class.name}}(avp, enumerated);
    }

    enum Code { {% for enum in avp.enum_definition %}
        {{ enum }}{%if forloop.last == true %};{% else %},{% endif %}{% endfor %}

        private final String name;
        private final int code;

        Code(final String name, final int code) {
            this.name = name;
            this.code = code;
        }

        public int getCode() {
            return code;
        }

        static Optional<Code> lookup(final int code) {
            switch (code) { {% for switch in avp.enum_switch %}
                {{ switch }}{% endfor %}
                default:
                    return Optional.empty();
            }
        }
    }

    default Optional<Code> getAsEnum() {
        return getValue().getAsEnum();
    }

    static {{java.class.name}} parse(final FramedAvp raw) {
        if (CODE != raw.getCode()) {
            throw new AvpParseException("AVP Code mismatch - unable to parse the AVP into a " + {{java.class.name}}.class.getName());
        }
        final Buffer data = raw.getData();
        final int value = data.getInt(0);
        final Optional<Code> e = Code.lookup(value);
        final EnumeratedHolder holder = new EnumeratedHolder(value, e);
        return new Default{{java.class.name}}(raw, holder);
    }

    class Default{{java.class.name}} extends {{avp.type.class}}<Code> implements {{java.class.name}} {
        private Default{{java.class.name}}(final FramedAvp raw, final EnumeratedHolder value) {
            super(raw, value);
        }

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            final Default{{java.class.name}} that = (Default{{java.class.name}}) o;
            return getValue().equals(that.getValue());
        }

        @Override
        public int hashCode() {
            return getValue().hashCode();
        }
    }

    /**
     * Ah! Must be a better way. I ran out of steam - getting late so it is what it is.
     */
    class EnumeratedHolder implements Enumerated<Code> {

        private final int code;
        private final Optional<Code> e;

        private EnumeratedHolder(final int code, final Optional<Code> e) {
            this.code = code;
            this.e = e;
        }

        @Override
        public boolean equals(final Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;

            final EnumeratedHolder that = (EnumeratedHolder) o;

            if (code != that.code) return false;
            return e.equals(that.e);
        }

        @Override
        public int hashCode() {
            int result = code;
            result = 31 * result + e.hashCode();
            return result;
        }

        @Override
        public Optional<Code> getAsEnum() {
            return e;
        }

        @Override
        public int getValue() {
            return code;
        }
    }

}
