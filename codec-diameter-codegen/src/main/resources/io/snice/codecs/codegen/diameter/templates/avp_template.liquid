package {{java.package}};

{% if avp.type.interface != "Grouped" %}
import io.snice.buffer.Buffer;
import io.snice.buffer.Buffers; {% endif %}
import io.snice.codecs.codec.diameter.avp.Avp;
import io.snice.codecs.codec.diameter.avp.AvpMandatory;
import io.snice.codecs.codec.diameter.avp.AvpParseException;
import io.snice.codecs.codec.diameter.avp.AvpProtected;
import io.snice.codecs.codec.diameter.avp.FramedAvp;
import io.snice.codecs.codec.diameter.avp.Vendor;
{% if avp.type.interface == "Grouped" %}
import static io.snice.preconditions.PreConditions.assertCollectionNotEmpty;{% endif %}
import static io.snice.preconditions.PreConditions.assertNotNull;
import java.util.List;
import java.util.Optional;
{% for import in java.imports %}
import {{ import }};{% endfor %}

/**
 * This is an autogenerated class - do not edit
 * {{ javadoc.class }}
 */
public interface {{java.class.name}} extends Avp<{{avp.type.interface}}> {

    int CODE = {{avp.code}};

    {% if avp.type.interface == "Grouped" %}
    static {{java.class.name}} of(final Avp... avps) {
        assertNotNull(avps, "The list of AVPs cannot be null");
        return of(List.of(avps));
    }

    static {{java.class.name}} of(final List<Avp> avps) {
        assertCollectionNotEmpty(avps, "The list of AVPs cannot be null or the empty list");
        return of(Grouped.of(avps));
    }

    /**
     * <p>
     * Get the {@link FramedAvp} based on its AVP code. Note that this is the "raw" un-parsed
     * AVP and you either have to call {@link FramedAvp#ensure()} if you want to fully ensure it.
     * </p>
     *
     * <p>
     * Note, if there are many {@link Avp}s of the same type, only the first
     * one will be returned.
     * </p>
     *
     * @param code the AVP code
     * @return the first AVP found that has the
     * specified AVP code, or an empty optional if none is found.
     */
    default Optional<? extends FramedAvp> getFramedAvp(long code) {
        return getValue().getFramedAvp(code);
    }

    default Optional<? extends FramedAvp> getFramedAvp(final int code) {
        return getValue().getFramedAvp(code);
    }

    /**
     * Get a list of all AVPs
     *
     * @return
     */
    default List<? extends FramedAvp> getAvps() {
        return getValue().getAvps();
    }

    {% else %}
    static {{java.class.name}} of(final Buffer value) {
        final {{avp.type.interface}} v = {{avp.type.interface}}.{% if avp.tbcd_formatted %}parse(value, true);{% else %}parse(value);{% endif %}
        return of(v);
    }

    static {{java.class.name}} of(final String value) {
        return of(Buffers.wrap(value));
    }

    {% if avp.type.interface == "Unsigned32" or avp.type.interface == "Integer64" %}
    static {{java.class.name}} of(final long value) {
        final {{avp.type.interface}} v = {{avp.type.interface}}.of(value);
        return of(v);
    }
    {% endif %}
    {% if avp.type.interface == "Integer32" %}
    static {{java.class.name}} of(final int value) {
        final {{avp.type.interface}} v = {{avp.type.interface}}.of(value);
        return of(v);
    }
    {% endif %}{% endif %}

    static {{java.class.name}} of(final {{avp.type.interface}} value) {
        assertNotNull(value);
        final Builder<{{avp.type.interface}}> builder =
                Avp.ofType({{avp.type.interface}}.class)
                        .withValue(value)
                        .withAvpCode(CODE)
                        .isMandatory(AvpMandatory.{{avp.mandatory_bit}}.isMandatory())
                        .isProtected(AvpProtected.{{avp.protected_bit}}.isProtected())
                        .withVendor(Vendor.{{avp.vendor}});

        return new Default{{java.class.name}}(builder.build());
    }

    @Override
    default long getCode() {
        return CODE;
    }

    default boolean is{{java.class.name}}() {
        return true;
    }

    default {{java.class.name}} to{{java.class.name}}() {
        return this;
    }

    static {{java.class.name}} parse(final FramedAvp raw) {
        if (CODE != raw.getCode()) {
            throw new AvpParseException("AVP Code mismatch - unable to parse the AVP into a " + {{java.class.name}}.class.getName());
        }
        return new Default{{java.class.name}}(raw);
    }

    class Default{{java.class.name}} extends {{avp.type.class}} implements {{java.class.name}} {
        private Default{{java.class.name}}(final FramedAvp raw) {
            {% if avp.tbcd_formatted %}super(raw, true);{% else %}super(raw);{% endif %}
        }

        @Override
        public {{java.class.name}} ensure() {
            return this;
        }

        @Override
        public boolean equals(final Object other) {
            if (this == other) {
                return true;
            }

            if (other == null) {
                return false;
            }

            try {
                final {{java.class.name}} o = ({{java.class.name}})((FramedAvp)other).ensure();
                final {{avp.type.interface}} v = getValue();
                return v.equals(o.getValue());
            } catch (final ClassCastException e) {
                return false;
            }
        }
    }
}
